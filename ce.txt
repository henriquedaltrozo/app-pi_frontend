CustomDialog.js

import * as React from "react";
import {
  Provider,
  Button as PaperButton,
  Paragraph,
  Dialog,
  Portal,
} from "react-native-paper";

const CustomDialog = (props) => {
  return (
    <Provider>
      <Portal>
        <Dialog visible={props.visible} onDismiss={() => props.onClose(false)}>
          <Dialog.Title>{props.titulo}</Dialog.Title>
          <Dialog.Content>
            <Paragraph>{props.mensagem}</Paragraph>
          </Dialog.Content>
          <Dialog.Actions>
            <PaperButton onPress={() => props.onClose(false)}>OK</PaperButton>
          </Dialog.Actions>
        </Dialog>
      </Portal>
    </Provider>
  );
};

export default CustomDialog;



Cadastro.js  //com CustomDialog

import React, { useState } from "react";
import {
  KeyboardAvoidingView,
  ScrollView,
  StyleSheet,
  View,
  Platform,
} from "react-native";
import { Button, CheckBox, Input, Text } from "react-native-elements";
import Icon from "react-native-vector-icons/FontAwesome";
import { validateEmail } from "../functions/validateFunctions";
import { TextInputMask } from "react-native-masked-text";
import usuarioService from "../services/UsuarioService";
import CustomDialog from "../components/CustomDialog";

export default function Cadastro({ navigation }) {
  const [email, setEmail] = useState(null);
  const [nome, setNome] = useState(null);
  const [cpf, setCpf] = useState(null);
  const [senha, setSenha] = useState(null);
  const [telefone, setTelefone] = useState(null);
  const [isSelected, setSelected] = useState(false);
  const [errorEmail, setErrorEmail] = useState(false);
  const [errorNome, setErrorNome] = useState(null);
  const [errorCpf, setErrorCpf] = useState(null);
  const [errorTelefone, setErrorTelefone] = useState(null);
  const [errorSenha, setErrorSenha] = useState(null);
  const [isLoading, setLoading] = useState(false);

  const [visibleDialog, setVisibleDialog] = useState(false);
  const [titulo, setTitulo] = useState(null);
  const [mensagem, setMensagem] = useState(null);
  const [tipo, setTipo] = useState(null);

  let cpfField = null;
  let telefoneField = null;

  const showDialog = (titulo, mensagem, tipo) => {
    console.log("Showing Dialog"); //teste
    setVisibleDialog(true);
    setTitulo(titulo);
    setMensagem(mensagem);
    setTipo(tipo);
  };

  const hideDialog = (status) => {
    console.log("Hiding Dialog"); //false
    setVisibleDialog(status);
  };

  const validar = () => {
    let error = false;
    setErrorEmail(null);
    setErrorNome(null);
    setErrorCpf(null);
    setErrorTelefone(null);
    setErrorSenha(null);
    if (!validateEmail.test(String(email).toLowerCase())) {
      setErrorEmail("Preencha seu email corretamente.");
      error = true;
    }
    if (nome == null) {
      setErrorNome("Preencha seu nome completo corretamente.");
      error = true;
    }
    if (!cpfField.isValid()) {
      setErrorCpf("Preencha seu CPF corretamente.");
      error = true;
    }
    if (telefone == null) {
      setErrorTelefone("Preencha seu telefone corretamente.");
      error = true;
    }
    if (senha == null) {
      setErrorSenha("Preencha a senha.");
      error = true;
    }
    return !error;
  };

  const salvar = () => {
    if (validar()) {
      setLoading(true);

      let data = {
        email: email,
        cpf: cpf,
        nome: nome,
        telefone: telefone,
        senha: senha,
      };

      usuarioService
        .cadastrar(data)
        .then((response) => {
          setLoading(false);
          const titulo = (response.data.status) ? "Sucesso" : "Erro";
          showDialog(titulo, response.data.mensagem, "SUCESSO");
          //Alert.alert(titulo, response.data.mensagem)
        })
        .catch((error) => {
          setLoading(false);
          showDialog("Erro", "Houve um erro inesperado", "ERRO");
          //Alert.alert("Erro", "Houve um erro inesperado")
        });
    }
  };

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS == "ios" ? "padding" : "height"}
      style={styles.container}
      keyboardVerticalOffset={100}
    >
      <ScrollView style={styles.scrollStyle}>
        <Text h3>Cadastre-se</Text>
        <Input
          placeholder="Email"
          onChangeText={(value) => {
            setEmail(value);
            setErrorEmail(null);
          }}
          keyboardType="email-address"
          errorMessage={errorEmail}
        />

        <Input
          placeholder="Nome Completo"
          onChangeText={(value) => setNome(value)}
          errorMessage={errorNome}
        />

        <View style={styles.containerMask}>
          <TextInputMask
            placeholder="CPF"
            type="cpf"
            value={cpf}
            onChangeText={(value) => {
              setCpf(value), setErrorCpf(null);
            }}
            keyboardType="number-pad"
            returnKeyType="done"
            style={styles.maskedInput}
            ref={(ref) => (cpfField = ref)}
          />
        </View>
        <Text style={styles.errorMessage}>{errorCpf}</Text>

        <View style={styles.containerMask}>
          <TextInputMask
            placeholder="Telefone"
            type={"cel-phone"}
            options={{
              maskType: "BRL",
              withDDD: true,
              dddMask: "(99) ",
            }}
            value={telefone}
            onChangeText={(value) => {
              setTelefone(value), setErrorTelefone(null);
            }}
            keyboardType="phone-pad"
            returnKeyType="done"
            style={styles.maskedInput}
            ref={(ref) => (telefoneField = ref)}
          />
        </View>
        <Text style={styles.errorMessage}>{errorTelefone}</Text>

        <Input
          placeholder="Senha"
          onChangeText={(value) => setSenha(value)}
          errorMessage={errorSenha}
          secureTextEntry={true}
        />

        <CheckBox
          title="Eu aceito os termos de uso"
          checkedIcon="check"
          uncheckedIcon="square-o"
          checkedColor="green"
          uncheckedColor="red"
          checked={isSelected}
          onPress={() => setSelected(!isSelected)}
        />

        {isLoading && <Text>Carregando...</Text>}

        {!isLoading && (
          <Button
            icon={<Icon name="check" size={15} color="white" />}
            title="Salvar"
            buttonStyle={styles.button}
            onPress={() => salvar()}
          />
        )}

        {visibleDialog && (
          <CustomDialog
            titulo={titulo}
            mensagem={mensagem}
            tipo={tipo}
            visible={visibleDialog}
            onClose={hideDialog}
          ></CustomDialog>
        )}
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
    padding: 10,
  },
  button: {
    marginTop: 10,
    paddingHorizontal: 100,
    paddingVertical: 10,
  },
  maskedInput: {
    flexGrow: 1,
    height: 40,
    fontSize: 18,
    borderBottomColor: "#999",
    borderBottomWidth: 1,
    borderStyle: "solid",
    alignSelf: "flex-start",
  },
  containerMask: {
    flexDirection: "row",
    marginBottom: 5,
    marginLeft: 10,
    marginRight: 10,
  },
  errorMessage: {
    alignSelf: "flex-start",
    marginLeft: 15,
    color: "#f00",
    fontSize: 12,
  },
  scrollStyle: {
    width: "90%",
  },
});
